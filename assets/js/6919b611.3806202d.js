"use strict";(self.webpackChunkgopher_master_algol=self.webpackChunkgopher_master_algol||[]).push([[36],{9874:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var i=n(4848),r=n(8453),a=n(1432);const s='package main\n\nimport "fmt"\n\nfunc main() {\n    var a uint8 = 12  // 1100 in binary\n    var b uint8 = 10  // 1010 in binary\n    fmt.Printf("a & b = %d\\n", a & b)  // 1000 in binary, which is 8\n}\n\n',o="a & b = 8\n",c={title:"AND (&)"},d=void 0,l={id:"Bit basic/and/and",title:"AND (&)",description:"The AND operator compares each bit of the first operand to the corresponding bit",source:"@site/docs/01-Bit basic/01-and/and.mdx",sourceDirName:"01-Bit basic/01-and",slug:"/Bit basic/and/and",permalink:"/GopherMasterAlgol/Bit basic/and/and",draft:!1,unlisted:!1,editUrl:"https://github.com/yukendhiran/GopherMasterAlgol/docs/01-Bit basic/01-and/and.mdx",tags:[],version:"current",frontMatter:{title:"AND (&)"},sidebar:"tutorialSidebar",previous:{title:"Bit Basic",permalink:"/GopherMasterAlgol/category/bit-basic"},next:{title:"OR (`|`)",permalink:"/GopherMasterAlgol/Bit basic/or/or"}},p={},h=[];function b(t){const e={p:"p",...(0,r.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"The AND operator compares each bit of the first operand to the corresponding bit\nof the second operand. If both bits are 1, the corresponding result bit is set to 1. Otherwise, it is set to 0."}),"\n",(0,i.jsx)(a.A,{language:"go",children:s}),"\n",(0,i.jsx)(e.p,{children:"Output:"}),"\n",(0,i.jsx)(a.A,{language:"text",children:o})]})}function u(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(b,{...t})}):b(t)}}}]);