"use strict";(self.webpackChunkgopher_master_algol=self.webpackChunkgopher_master_algol||[]).push([[9599],{2390:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"GopherMasterAlgol","href":"/GopherMasterAlgol/","docId":"intro","unlisted":false},{"type":"category","label":"Bit Basic","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"and","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AND (&)","href":"/GopherMasterAlgol/Bit basic/and/and","docId":"Bit basic/and/and","unlisted":false}]},{"type":"category","label":"or","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"OR (`|`)","href":"/GopherMasterAlgol/Bit basic/or/or","docId":"Bit basic/or/or","unlisted":false}]},{"type":"category","label":"not","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"NOT (`^`)","href":"/GopherMasterAlgol/Bit basic/not/not","docId":"Bit basic/not/not","unlisted":false}]},{"type":"category","label":"xor","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"XOR (`^`)","href":"/GopherMasterAlgol/Bit basic/xor/xor","docId":"Bit basic/xor/xor","unlisted":false}]},{"type":"category","label":"andnot","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AND NOT (&^)","href":"/GopherMasterAlgol/Bit basic/andnot/andnot","docId":"Bit basic/andnot/andnot","unlisted":false}]},{"type":"category","label":"leftshift","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Left Shift Operator (`<<`)","href":"/GopherMasterAlgol/Bit basic/leftshift/leftshift","docId":"Bit basic/leftshift/leftshift","unlisted":false}]},{"type":"category","label":"rightshift","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Right Shift Operator (`>>`)","href":"/GopherMasterAlgol/Bit basic/rightshift/rightshift","docId":"Bit basic/rightshift/rightshift","unlisted":false}]},{"type":"category","label":"bitmagic","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"BIT MAGIC","href":"/GopherMasterAlgol/Bit basic/bitmagic/bitmagic","docId":"Bit basic/bitmagic/bitmagic","unlisted":false}]},{"type":"category","label":"countBit","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Count 1\'s in Bit","href":"/GopherMasterAlgol/Bit basic/countBit/countbit","docId":"Bit basic/countBit/countbit","unlisted":false}]},{"type":"category","label":"oddeven","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Odd or Even Check Using Bitwise AND","href":"/GopherMasterAlgol/Bit basic/oddeven/oddeven","docId":"Bit basic/oddeven/oddeven","unlisted":false}]},{"type":"category","label":"poweroftwo","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Power Of Two","href":"/GopherMasterAlgol/Bit basic/poweroftwo/poweroftwo","docId":"Bit basic/poweroftwo/poweroftwo","unlisted":false}]}],"href":"/GopherMasterAlgol/category/bit-basic"},{"type":"category","label":"Bit Problem","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"uniquenumber","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Check Unique Number","href":"/GopherMasterAlgol/Bit Problem/uniquenumber/uniquenum","docId":"Bit Problem/uniquenumber/uniquenum","unlisted":false}]}],"href":"/GopherMasterAlgol/category/bit-problem"}]},"docs":{"Bit basic/and/and":{"id":"Bit basic/and/and","title":"AND (&)","description":"The AND operator compares each bit of the first operand to the corresponding bit","sidebar":"tutorialSidebar"},"Bit basic/andnot/andnot":{"id":"Bit basic/andnot/andnot","title":"AND NOT (&^)","description":"The &^ operator in Go, known as the \\"bit clear\\" operator, is used to selectively clear bits in the left operand based on the bits set to 1 in the right operand.","sidebar":"tutorialSidebar"},"Bit basic/bitmagic/bitmagic":{"id":"Bit basic/bitmagic/bitmagic","title":"BIT MAGIC","description":"getBits:","sidebar":"tutorialSidebar"},"Bit basic/countBit/countbit":{"id":"Bit basic/countBit/countbit","title":"Count 1\'s in Bit","description":"There are two ways to count the number of ones in a given number:","sidebar":"tutorialSidebar"},"Bit basic/leftshift/leftshift":{"id":"Bit basic/leftshift/leftshift","title":"Left Shift Operator (`<<`)","description":"The left shift operator (<<) shifts the bits of its left-hand operand to the left by the number of positions specified by its right-hand operand. Each left shift operation essentially multiplies the number by 2 raised to the power of the number of positions shifted.","sidebar":"tutorialSidebar"},"Bit basic/not/not":{"id":"Bit basic/not/not","title":"NOT (`^`)","description":"While Go does not have a unary bitwise NOT (~) operator, it achieves the same functionality using the caret (^) as a bitwise complement operator. This operator flips each bit of its operand, providing bitwise negation functionality in Go.","sidebar":"tutorialSidebar"},"Bit basic/oddeven/oddeven":{"id":"Bit basic/oddeven/oddeven","title":"Odd or Even Check Using Bitwise AND","description":"To determine if a number is odd or even, you can use the bitwise AND operator (&). By performing a bitwise AND between the number and 1, you can check the least significant bit (the last bit) of the number:","sidebar":"tutorialSidebar"},"Bit basic/or/or":{"id":"Bit basic/or/or","title":"OR (`|`)","description":"The OR operator compares each bit of the first operand to the corresponding bit of the second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, it is set to 0.","sidebar":"tutorialSidebar"},"Bit basic/poweroftwo/poweroftwo":{"id":"Bit basic/poweroftwo/poweroftwo","title":"Power Of Two","description":"To determine if a number is a power of two, we can perform a bitwise AND operation between the number and its previous number. If the result is zero, then the number is a power of two. Otherwise, the result will be some other number.","sidebar":"tutorialSidebar"},"Bit basic/rightshift/rightshift":{"id":"Bit basic/rightshift/rightshift","title":"Right Shift Operator (`>>`)","description":"The right shift operator (>>) shifts the bits of its left-hand operand to the right by the number of positions specified by its right-hand operand. Each right shift operation essentially divides the number by 2 raised to the power of the number of positions shifted.","sidebar":"tutorialSidebar"},"Bit basic/xor/xor":{"id":"Bit basic/xor/xor","title":"XOR (`^`)","description":"The XOR operator compares each bit of the first operand to the corresponding bit of the second operand. If the bits are different, the corresponding result bit is set to 1. Otherwise, it is set to 0.","sidebar":"tutorialSidebar"},"Bit Problem/uniquenumber/uniquenum":{"id":"Bit Problem/uniquenumber/uniquenum","title":"Check Unique Number","description":"In a set of 2n+1 numbers, where every number appears twice except for one, we can easily find the unique number. This is because the XOR operation between the same numbers results in 0, so the numbers that appear twice will cancel each other out, leaving only the unique number. To find the unique number, we can XOR all the elements in the array.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"GopherMasterAlgol","description":"Introduction","sidebar":"tutorialSidebar"}}}}')}}]);