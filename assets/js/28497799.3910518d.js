"use strict";(self.webpackChunkgopher_master_algol=self.webpackChunkgopher_master_algol||[]).push([[44],{9361:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>f});var s=i(4848),n=i(8453),r=i(1432);const l='package main\n\nimport "fmt"\n\nfunc main() {\n    var a int = 1\n    fmt.Println(a << 1)  // 2\n    fmt.Println(a << 2)  // 4\n    fmt.Println(a << 3)  // 8\n}\n',h="2\n4\n8\n",o={title:"Left Shift Operator (`<<`)"},c=void 0,a={id:"Bit basic/leftshift/leftshift",title:"Left Shift Operator (`<<`)",description:"The left shift operator (<<) shifts the bits of its left-hand operand to the left by the number of positions specified by its right-hand operand. Each left shift operation essentially multiplies the number by 2 raised to the power of the number of positions shifted.",source:"@site/docs/01-Bit basic/06-leftshift/leftshift.mdx",sourceDirName:"01-Bit basic/06-leftshift",slug:"/Bit basic/leftshift/leftshift",permalink:"/GopherMasterAlgol/Bit basic/leftshift/leftshift",draft:!1,unlisted:!1,editUrl:"https://github.com/yukendhiran/GopherMasterAlgol/docs/01-Bit basic/06-leftshift/leftshift.mdx",tags:[],version:"current",frontMatter:{title:"Left Shift Operator (`<<`)"},sidebar:"tutorialSidebar",previous:{title:"AND NOT (&^)",permalink:"/GopherMasterAlgol/Bit basic/andnot/andnot"},next:{title:"Right Shift Operator (`>>`)",permalink:"/GopherMasterAlgol/Bit basic/rightshift/rightshift"}},d={},f=[];function p(t){const e={code:"code",li:"li",p:"p",ul:"ul",...(0,n.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["The left shift operator (",(0,s.jsx)(e.code,{children:"<<"}),") shifts the bits of its left-hand operand to the left by the number of positions specified by its right-hand operand. Each left shift operation essentially multiplies the number by ",(0,s.jsx)(e.code,{children:"2"})," raised to the power of the number of positions shifted."]}),"\n",(0,s.jsxs)(e.p,{children:["Example with ",(0,s.jsx)(e.code,{children:"var a int = 1"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Binary representation of ",(0,s.jsx)(e.code,{children:"1"}),": ",(0,s.jsx)(e.code,{children:"00000001"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"1 << 1"}),": shifts the bits one position to the left, resulting in ",(0,s.jsx)(e.code,{children:"00000010"}),", which is ",(0,s.jsx)(e.code,{children:"2"})," in decimal."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"1 << 2"}),": shifts the bits two positions to the left, resulting in ",(0,s.jsx)(e.code,{children:"00000100"}),", which is ",(0,s.jsx)(e.code,{children:"4"})," in decimal."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"1 << 3"}),": shifts the bits three positions to the left, resulting in ",(0,s.jsx)(e.code,{children:"00001000"}),", which is ",(0,s.jsx)(e.code,{children:"8"})," in decimal."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Pattern explanation:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Each shift to the left introduces a ",(0,s.jsx)(e.code,{children:"0"})," at the least significant bit (rightmost position), effectively multiplying the number by ",(0,s.jsx)(e.code,{children:"2"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.A,{language:"go",children:l}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(r.A,{language:"text",children:h})]})}function u(t={}){const{wrapper:e}={...(0,n.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(p,{...t})}):p(t)}}}]);