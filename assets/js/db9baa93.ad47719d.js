"use strict";(self.webpackChunkgopher_master_algol=self.webpackChunkgopher_master_algol||[]).push([[5946],{6221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>d,frontMatter:()=>u,metadata:()=>o,toc:()=>b});var s=n(4848),r=n(8453),i=n(1432);const a='package main\n\nimport "fmt"\n\nfunc subset(size int, chars []rune){\n\n\tfor i:=0;i<(1<<size);i++{\n\t\tfor j:=0;j<size;j++{\n\t\t\tif i & (1<<j) != 0{\n\t\t\t\tfmt.Printf("%c ",chars[j])\n\t\t\t}\n\t\t}\n\t\tfmt.Println()\n\t}\n\n}\n\nfunc main(){\n\tfmt.Printf("Enter the size of Characters: ")\n\tvar size int\n\tfmt.Scanln(&size)\n\tfmt.Printf("Enter the Characters: ")\n\tvar chars []rune\n\n\tfor i:=0;i<size;i++{\n\t\tvar ch rune\n\t\tfmt.Scanf("%c",&ch)\n\t\tchars = append(chars, ch)\n\t}\n\t\n\tfmt.Printf("The Original Characters are: %c", chars)\n\n\tsubset(size, chars)\n}',l="Enter the size of Characters: 4\b \b3\r\nEnter the Characters: xyz\r\nThe Original Characters are: [x y z]\r\nx \r\ny \r\nx y \r\nz \r\nx z \r\ny z \r\nx y z ",u={title:"Subset for Given String"},c=void 0,o={id:"Bit Problem/subsets/subset",title:"Subset for Given String",description:"To find all subsets of a set, we can use bitmasking technique. This involves representing each subset as a binary number, where each bit indicates whether a particular element is included in the subset.",source:"@site/docs/02-Bit Problem/02-subsets/subset.mdx",sourceDirName:"02-Bit Problem/02-subsets",slug:"/Bit Problem/subsets/subset",permalink:"/GopherMasterAlgol/Bit Problem/subsets/subset",draft:!1,unlisted:!1,editUrl:"https://github.com/yukendhiran/GopherMasterAlgol/docs/02-Bit Problem/02-subsets/subset.mdx",tags:[],version:"current",frontMatter:{title:"Subset for Given String"},sidebar:"tutorialSidebar",previous:{title:"Check Unique Number",permalink:"/GopherMasterAlgol/Bit Problem/uniquenumber/uniquenum"},next:{title:"Traveling Salesman Problem (TSP) Using Bit Masking",permalink:"/GopherMasterAlgol/Bit Problem/salesman/salesman"}},h={},b=[];function m(e){const t={li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"To find all subsets of a set, we can use bitmasking technique. This involves representing each subset as a binary number, where each bit indicates whether a particular element is included in the subset."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The total number of subsets of a set with N elements is 2^N. This is because each element can either be included or excluded from a subset, resulting in 2N2N combinations."}),"\n",(0,s.jsx)(t.li,{children:"By iterating over binary numbers from 0 to 2N\u221212N\u22121, you can generate all possible subsets. Each bit in the binary number indicates whether the corresponding element is included in the subset."}),"\n"]}),"\n",(0,s.jsx)(i.A,{language:"go",children:a}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(i.A,{language:"text",children:l})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);