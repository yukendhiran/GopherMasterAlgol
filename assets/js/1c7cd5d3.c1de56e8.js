"use strict";(self.webpackChunkgopher_master_algol=self.webpackChunkgopher_master_algol||[]).push([[323],{4498:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var i=r(4848),n=r(8453),o=r(1432);const s='package main\n\nimport "fmt"\n\nfunc main() {\n    var a uint8 = 12  // 1100 in binary\n    var b uint8 = 10  // 1010 in binary\n    fmt.Printf("a | b = %d\\n", a | b)  // 1110 in binary, which is 14\n}',a="a | b = 14\n",c={title:"OR (`|`)"},l=void 0,p={id:"Bit basic/or/or",title:"OR (`|`)",description:"The OR operator compares each bit of the first operand to the corresponding bit of the second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, it is set to 0.",source:"@site/docs/01-Bit basic/02-or/or.mdx",sourceDirName:"01-Bit basic/02-or",slug:"/Bit basic/or/or",permalink:"/GopherMasterAlgol/Bit basic/or/or",draft:!1,unlisted:!1,editUrl:"https://github.com/yukendhiran/GopherMasterAlgol/docs/01-Bit basic/02-or/or.mdx",tags:[],version:"current",frontMatter:{title:"OR (`|`)"},sidebar:"tutorialSidebar",previous:{title:"AND (&)",permalink:"/GopherMasterAlgol/Bit basic/and/and"},next:{title:"NOT (`^`)",permalink:"/GopherMasterAlgol/Bit basic/not/not"}},h={},d=[];function b(t){const e={p:"p",...(0,n.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"The OR operator compares each bit of the first operand to the corresponding bit of the second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, it is set to 0."}),"\n",(0,i.jsx)(o.A,{language:"go",children:s}),"\n",(0,i.jsx)(e.p,{children:"Output:"}),"\n",(0,i.jsx)(o.A,{language:"text",children:a})]})}function u(t={}){const{wrapper:e}={...(0,n.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(b,{...t})}):b(t)}}}]);