"use strict";(self.webpackChunkgopher_master_algol=self.webpackChunkgopher_master_algol||[]).push([[305],{8883:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>f,contentTitle:()=>w,default:()=>b,frontMatter:()=>a,metadata:()=>m,toc:()=>p});var n=o(4848),r=o(8453),i=o(1432);const s='package main\n\nimport "fmt"\n\nfunc poweroftwo(num uint8)  {\n\tif(num & (num-1) == 0) {\n\t\tfmt.Println("Power of 2")\n\t} else {\n\t\tfmt.Println("Not Power of 2")\n\t}\n}\n\nfunc main() {\n\tnum1 := uint8(8)\n\tfmt.Printf("Number :%8b and Number -1: %8b\\n", num1, num1-1)\n\tpoweroftwo(num1)\n\n\tnum2 := uint8(5)\n\tfmt.Printf("Number :%8b and Number -1: %8b\\n", num2, num2-1)\n\tpoweroftwo(num2)\n}',u="Number :    1000 and Number -1:      111\nPower of 2\nNumber :     101 and Number -1:      100\nNot Power of 2\n",a={title:"Power Of Two"},w=void 0,m={id:"Bit basic/poweroftwo/poweroftwo",title:"Power Of Two",description:"To determine if a number is a power of two, we can perform a bitwise AND operation between the number and its previous number. If the result is zero, then the number is a power of two. Otherwise, the result will be some other number.",source:"@site/docs/01-Bit basic/11-poweroftwo/poweroftwo.mdx",sourceDirName:"01-Bit basic/11-poweroftwo",slug:"/Bit basic/poweroftwo/poweroftwo",permalink:"/GopherMasterAlgol/Bit basic/poweroftwo/poweroftwo",draft:!1,unlisted:!1,editUrl:"https://github.com/yukendhiran/GopherMasterAlgol/docs/01-Bit basic/11-poweroftwo/poweroftwo.mdx",tags:[],version:"current",frontMatter:{title:"Power Of Two"},sidebar:"tutorialSidebar",previous:{title:"Odd or Even Check Using Bitwise AND",permalink:"/GopherMasterAlgol/Bit basic/oddeven/oddeven"}},f={},p=[];function l(e){const t={p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"To determine if a number is a power of two, we can perform a bitwise AND operation between the number and its previous number. If the result is zero, then the number is a power of two. Otherwise, the result will be some other number."}),"\n",(0,n.jsx)(i.A,{language:"go",children:s}),"\n",(0,n.jsx)(t.p,{children:"Output:"}),"\n",(0,n.jsx)(i.A,{language:"text",children:u})]})}function b(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);